// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stacks.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const archiveStack = `-- name: ArchiveStack :one
update stacks
set archived_at = now()
where id = $1
  and archived_at is null
returning id, name, slug, created_at, archived_at
`

func (q *Queries) ArchiveStack(ctx context.Context, id uuid.UUID) (Stack, error) {
	row := q.db.QueryRow(ctx, archiveStack, id)
	var i Stack
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const createStack = `-- name: CreateStack :one
insert into stacks (id, name, slug)
values ($1, $2, $3)
returning id, name, slug, created_at, archived_at
`

type CreateStackParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Slug string    `json:"slug"`
}

func (q *Queries) CreateStack(ctx context.Context, arg CreateStackParams) (Stack, error) {
	row := q.db.QueryRow(ctx, createStack, arg.ID, arg.Name, arg.Slug)
	var i Stack
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const getStackBySlug = `-- name: GetStackBySlug :one
select id, name, slug, created_at, archived_at
from stacks
where slug = $1
`

func (q *Queries) GetStackBySlug(ctx context.Context, slug string) (Stack, error) {
	row := q.db.QueryRow(ctx, getStackBySlug, slug)
	var i Stack
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const listStacks = `-- name: ListStacks :many
select id, name, slug, created_at, archived_at
from stacks
where ($1::bool is true)
   or (archived_at is null)
order by created_at desc
limit $2::int offset $3::int
`

type ListStacksParams struct {
	Column1 bool  `json:"column_1"`
	Column2 int32 `json:"column_2"`
	Column3 int32 `json:"column_3"`
}

func (q *Queries) ListStacks(ctx context.Context, arg ListStacksParams) ([]Stack, error) {
	rows, err := q.db.Query(ctx, listStacks, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stack
	for rows.Next() {
		var i Stack
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
