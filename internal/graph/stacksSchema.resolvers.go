package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"

	"github.com/AndrewNicholasEne/StratosphereElevator/internal/db"
	"github.com/AndrewNicholasEne/StratosphereElevator/internal/graph/generated"
	"github.com/AndrewNicholasEne/StratosphereElevator/internal/graph/model"
	"github.com/AndrewNicholasEne/StratosphereElevator/internal/stacks"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateStack is the resolver for the createStack field.
func (r *mutationResolver) CreateStack(ctx context.Context, input model.CreateStackInput) (*model.CreateStackPayload, error) {
	st, err := r.StacksService.Create(ctx, stacks.CreateInput{
		Name: input.Name,
		Slug: input.Slug, // *string OK
	})
	if err != nil {
		switch {
		case errorsIs(err, stacks.ErrInvalidInput):
			return nil, gqlErr("BAD_USER_INPUT", "invalid input")
		case errorsIs(err, stacks.ErrConflict):
			return nil, gqlErr("CONFLICT", "slug conflict")
		default:
			return nil, gqlErr("INTERNAL", "internal error")
		}
	}

	g := toGQL(st)
	return &model.CreateStackPayload{Stack: &g}, nil
}

// ArchiveStack is the resolver for the archiveStack field.
func (r *mutationResolver) ArchiveStack(ctx context.Context, id string) (*model.ArchiveStackPayload, error) {
	uid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlErr("BAD_USER_INPUT", "invalid id")
	}
	if err := r.StacksService.Archive(ctx, uid); err != nil {
		switch {
		case errorsIs(err, stacks.ErrAlreadyArchived):
			return nil, gqlErr("CONFLICT", "already archived")
		case errorsIs(err, stacks.ErrNotFound):
			return nil, gqlErr("NOT_FOUND", "not found")
		default:
			return nil, gqlErr("INTERNAL", "internal error")
		}
	}
	return &model.ArchiveStackPayload{Ok: true}, nil
}

// Stack is the resolver for the stack field.
func (r *queryResolver) Stack(ctx context.Context, slug string) (*model.Stack, error) {
	st, err := r.StacksService.GetBySlug(ctx, slug)
	if err != nil {
		if errors.Is(err, stacks.ErrNotFound) {
			return nil, gqlErr("NOT_FOUND", "not found")
		}
		return nil, gqlErr("INTERNAL", "internal error")
	}
	g := toGQL(st)
	return &g, nil
}

// Stacks is the resolver for the stacks field.
func (r *queryResolver) Stacks(ctx context.Context, includeArchived *bool, limit *int, offset *int) ([]*model.Stack, error) {
	inc := false
	if includeArchived != nil {
		inc = *includeArchived
	}
	lim := 20
	if limit != nil {
		lim = *limit
	}
	off := 0
	if offset != nil {
		off = *offset
	}

	rows, err := r.StacksService.List(ctx, db.ListStacksParams{Column1: inc, Column2: int32(lim), Column3: int32(off)})
	if err != nil {
		return nil, gqlErr("INTERNAL", "internal error")
	}

	out := make([]*model.Stack, 0, len(rows)) // non-nil slice
	for _, s := range rows {
		g := toGQL(s)
		out = append(out, &g)
	}
	return out, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func errorsIs(err, target error) bool { return err != nil && target != nil && errors.Is(err, target) }
func gqlErr(code, msg string) *gqlerror.Error {
	e := gqlerror.Errorf(msg)
	e.Extensions = map[string]any{"code": code}
	return e
}
